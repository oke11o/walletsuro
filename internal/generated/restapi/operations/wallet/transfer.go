// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferHandlerFunc turns a function with the right signature into a transfer handler
type TransferHandlerFunc func(TransferParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TransferHandlerFunc) Handle(params TransferParams) middleware.Responder {
	return fn(params)
}

// TransferHandler interface for that can handle valid transfer params
type TransferHandler interface {
	Handle(TransferParams) middleware.Responder
}

// NewTransfer creates a new http.Handler for the transfer operation
func NewTransfer(ctx *middleware.Context, handler TransferHandler) *Transfer {
	return &Transfer{Context: ctx, Handler: handler}
}

/* Transfer swagger:route POST /transfer wallet transfer

Transfer money to another wallet

Transfer money to another wallet

*/
type Transfer struct {
	Context *middleware.Context
	Handler TransferHandler
}

func (o *Transfer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTransferParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TransferBody transfer body
//
// swagger:model TransferBody
type TransferBody struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// from wallet id
	// Required: true
	FromWalletID *string `json:"from_wallet_id"`

	// to wallet id
	// Required: true
	ToWalletID *string `json:"to_wallet_id"`
}

// Validate validates this transfer body
func (o *TransferBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFromWalletID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToWalletID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TransferBody) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"amount", "body", o.Amount); err != nil {
		return err
	}

	return nil
}

func (o *TransferBody) validateFromWalletID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"from_wallet_id", "body", o.FromWalletID); err != nil {
		return err
	}

	return nil
}

func (o *TransferBody) validateToWalletID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"to_wallet_id", "body", o.ToWalletID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transfer body based on context it is used
func (o *TransferBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TransferBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TransferBody) UnmarshalBinary(b []byte) error {
	var res TransferBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
