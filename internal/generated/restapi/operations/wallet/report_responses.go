// Code generated by go-swagger; DO NOT EDIT.

package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/oke11o/walletsuro/internal/generated/models"
)

// ReportOKCode is the HTTP code returned for type ReportOK
const ReportOKCode int = 200

/*ReportOK Success

swagger:response reportOK
*/
type ReportOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewReportOK creates ReportOK with default headers values
func NewReportOK() *ReportOK {

	return &ReportOK{}
}

// WithPayload adds the payload to the report o k response
func (o *ReportOK) WithPayload(payload interface{}) *ReportOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the report o k response
func (o *ReportOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReportOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReportInternalServerErrorCode is the HTTP code returned for type ReportInternalServerError
const ReportInternalServerErrorCode int = 500

/*ReportInternalServerError Internal server error

swagger:response reportInternalServerError
*/
type ReportInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.SimpleResponse `json:"body,omitempty"`
}

// NewReportInternalServerError creates ReportInternalServerError with default headers values
func NewReportInternalServerError() *ReportInternalServerError {

	return &ReportInternalServerError{}
}

// WithPayload adds the payload to the report internal server error response
func (o *ReportInternalServerError) WithPayload(payload *models.SimpleResponse) *ReportInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the report internal server error response
func (o *ReportInternalServerError) SetPayload(payload *models.SimpleResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReportInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
