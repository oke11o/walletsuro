// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	money "github.com/Rhymond/go-money"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/oke11o/walletsuro/internal/model"
	reflect "reflect"
	time "time"
)

// Mockservice is a mock of service interface
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method
func (m *Mockservice) CreateWallet(ctx context.Context, userID int64) (model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, userID)
	ret0, _ := ret[0].(model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet
func (mr *MockserviceMockRecorder) CreateWallet(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*Mockservice)(nil).CreateWallet), ctx, userID)
}

// Deposit mocks base method
func (m *Mockservice) Deposit(ctx context.Context, userID int64, uuid uuid.UUID, amount *money.Money) (model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, userID, uuid, amount)
	ret0, _ := ret[0].(model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit
func (mr *MockserviceMockRecorder) Deposit(ctx, userID, uuid, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*Mockservice)(nil).Deposit), ctx, userID, uuid, amount)
}

// Transfer mocks base method
func (m *Mockservice) Transfer(ctx context.Context, userID int64, fromWalletUUID, toWalletUUID uuid.UUID, amount *money.Money) (model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, userID, fromWalletUUID, toWalletUUID, amount)
	ret0, _ := ret[0].(model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockserviceMockRecorder) Transfer(ctx, userID, fromWalletUUID, toWalletUUID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*Mockservice)(nil).Transfer), ctx, userID, fromWalletUUID, toWalletUUID, amount)
}

// Report mocks base method
func (m *Mockservice) Report(ctx context.Context, userID int64, t *string, date *time.Time) ([]model.ReportData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", ctx, userID, t, date)
	ret0, _ := ret[0].([]model.ReportData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report
func (mr *MockserviceMockRecorder) Report(ctx, userID, t, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*Mockservice)(nil).Report), ctx, userID, t, date)
}
