// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Wallet wallet
//
// swagger:model wallet
type Wallet struct {

	// amount
	// Required: true
	Amount float64 `json:"amount"`

	// currency
	// Required: true
	Currency string `json:"currency"`

	// wallet uuid
	// Required: true
	// Format: uuid
	WalletUUID strfmt.UUID `json:"wallet_uuid"`
}

// Validate validates this wallet
func (m *Wallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWalletUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wallet) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", float64(m.Amount)); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Wallet) validateWalletUUID(formats strfmt.Registry) error {

	if err := validate.Required("wallet_uuid", "body", strfmt.UUID(m.WalletUUID)); err != nil {
		return err
	}

	if err := validate.FormatOf("wallet_uuid", "body", "uuid", m.WalletUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wallet based on context it is used
func (m *Wallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Wallet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wallet) UnmarshalBinary(b []byte) error {
	var res Wallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
